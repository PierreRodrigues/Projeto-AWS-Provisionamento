Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nome do par de chaves EC2
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  CidrIp:
    Type: String
    Default: 0.0.0.0/0
  InstanceType:
    Type: String
    Default: t3.small
  AmiId:
    Type: String
    Default: ami-080e1f13689e07408 # Ubuntu 20.04 LTS - us-east-1
Resources:
  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyECSCluster
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite SSH e HTTP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CidrIp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CidrIp
  MyECSInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ECSInstanceProfile
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref SubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -xe
          apt update -y
          apt install -y docker.io awscli curl
          systemctl enable docker
          systemctl start docker

          mkdir -p /etc/ecs
          echo "ECS_CLUSTER=${MyECSCluster}" > /etc/ecs/ecs.config
          echo "ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"]" >> /etc/ecs/ecs.config
          echo "ECS_ENABLE_TASK_IAM_ROLE=true" >> /etc/ecs/ecs.config
          echo "ECS_ENABLE_TASK_ENI=true" >> /etc/ecs/ecs.config

          docker run --name ecs-agent --detach --restart=always \
            --volume=/var/run/docker.sock:/var/run/docker.sock \
            --volume=/var/lib/ecs/data:/data \
            --volume=/etc/ecs:/etc/ecs \
            --volume=/var/log/ecs/:/log \
            --network=host \
            -e ECS_DATADIR=/data \
            -e ECS_LOGFILE=/log/ecs-agent.log \
            -e ECS_LOGLEVEL=info \
            -e ECS_CLUSTER=${MyECSCluster} \
            -e ECS_AVAILABLE_LOGGING_DRIVERS='["json-file","awslogs"]' \
            -e AWS_REGION=us-east-1 \
            amazon/amazon-ecs-agent:latest
      Tags:
        - Key: Name
          Value: MyECSInstance

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: NginxTask
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ContainerDefinitions:
        - Name: nginx-container  ## Aqui para subir a aplicação que vamos escolher
          Image: nginxdemos/hello
          Cpu: 256
          Memory: 256
          PortMappings:
          - ContainerPort: 80
            HostPort: 80
            Protocol: tcp
  MyECSService:
    Type: AWS::ECS::Service
    DependsOn: ["WebAutoScalingGroup", "ScaleByCPU", "EC2SecurityGroup", " WebLaunchTemplate",
    "AmazonLinuxAMI", "WebTargetGroup", "ALBSecurityGroup", "MainVPC", "PublicSubnetA", "PublicSubnetB",
    "InternetGateway", "AttachGateway", "PublicRouteTable", "DefaultRoute", "SubnetARouteTableAssociation",
    "SubnetBRouteTableAssociation","WebLoadBalancer", "HTTPListener"]
    Properties:
      Cluster: !Ref MyECSCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref MyTaskDefinition 
Outputs:
  ClusterName:
    Description: Nome do cluster ECS
    Value: !Ref MyECSCluster