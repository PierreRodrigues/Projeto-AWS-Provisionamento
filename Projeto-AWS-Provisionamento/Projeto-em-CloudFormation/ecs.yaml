Parameters:
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: VPC-HighAvailability

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet-B

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW-HighAvailability

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: RT-Public

  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

Resources:
  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      MaxSize: 4
      MinSize: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      TargetGroupARNs:
        - !Ref WebTargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: "$Latest"
      Tags:
        - Key: Name
          Value: ASG-WebServer
          PropagateAtLaunch: true

  ScaleByCPU:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB-Web
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: ALB-Web

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup

            ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SG-ALB
      GroupDescription: Permite HTTP público
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SG-ALB
          
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: NginxTask
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ContainerDefinitions:
        - Name: nginx-container  ## Aqui para subir a aplicação que vamos escolher
          Image: nginxdemos/hello
          Cpu: 256
          Memory: 256
          PortMappings:
          - ContainerPort: 80
            HostPort: 80
            Protocol: tcp
  MyECSService:
    Type: AWS::ECS::Service
    DependsOn: ["WebAutoScalingGroup", "ScaleByCPU", "EC2SecurityGroup", " WebLaunchTemplate",
    "AmazonLinuxAMI", "WebTargetGroup", "ALBSecurityGroup", "MainVPC", "PublicSubnetA", "PublicSubnetB",
    "InternetGateway", "AttachGateway", "PublicRouteTable", "DefaultRoute", "SubnetARouteTableAssociation",
    "SubnetBRouteTableAssociation","WebLoadBalancer", "HTTPListener"]
    Properties:
      Cluster: !Ref MyECSCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref MyTaskDefinition 
Outputs:
  ClusterName:
    Description: Nome do cluster ECS
    Value: !Ref MyECSCluster